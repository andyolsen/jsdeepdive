{"version":3,"file":"script.js","names":["promiseCount","doIt","thisPromiseCount","displayMessage","cssClass","message","messageArea","document","getElementById","insertAdjacentHTML"],"sources":["Student/09-Async/es6scripts/script.js"],"sourcesContent":["let promiseCount = 0;\n\nfunction doIt() {\n\n\tconst thisPromiseCount = ++promiseCount;\n\n\tdisplayMessage('info', `Promise ${thisPromiseCount}, sync code started`);\n\n\t// TODO: Create a Promise object. Pass a function into the Promise constructor, which does the following:\n\t//         - Performs some work on another thread (e.g. wait for a random time)\n\t//         - Decides to resolves or reject the promise (e.g. based on whether a random number is less than or more than 0.5).\n\t// \n\t\n\t// TODO: Handle Promise completion - then() handles successful resolution, catch() handles rejection.\n\t//       The idea here is to do some follow-on work, after the above promise was resolved or rejected.\n\n\t\n\tdisplayMessage('info', `Promise ${thisPromiseCount}, sync code ended`);\n}\n\nfunction displayMessage(cssClass, message) {\n\tconst messageArea = document.getElementById('messageArea')\n \tmessageArea.insertAdjacentHTML('beforeend', `<div class=\"${cssClass}\">${message}</div>`);\n}\n"],"mappings":";;AAAA,IAAIA,YAAY,GAAG,CAAnB;;AAEA,SAASC,IAAT,GAAgB;EAEf,IAAMC,gBAAgB,GAAG,EAAEF,YAA3B;EAEAG,cAAc,CAAC,MAAD,oBAAoBD,gBAApB,yBAAd,CAJe,CAMf;EACA;EACA;EACA;EAEA;EACA;;EAGAC,cAAc,CAAC,MAAD,oBAAoBD,gBAApB,uBAAd;AACA;;AAED,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;EAC1C,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;EACCF,WAAW,CAACG,kBAAZ,CAA+B,WAA/B,yBAA2DL,QAA3D,gBAAwEC,OAAxE;AACD"}
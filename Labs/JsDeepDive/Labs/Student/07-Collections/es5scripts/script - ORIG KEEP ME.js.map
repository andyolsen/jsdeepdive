{"version":3,"sources":["Student/08-Collections/es6scripts/script - ORIG KEEP ME.js"],"names":["Util","n","nextId","allProducts","Product","id","description","tags","email","price","sales","ts","Date","descStr","toUpperCase","big","bold","fontcolor","str","tsStr","getDate","getMonth","getFullYear","pad","getHours","getMinutes","getSeconds","$","document","ready","click","doGet","doInsert","doUpdate","doDelete","on","doDisplayProductsForTag","product","readProductDetail","push","displayMessage","displayProductDetail","displayProducts","displayTags","message","success","cssClass","removeClass","addClass","html","undefined","val","priceStr","parseFloat","toFixed","salesStr","parseInt","products","targetElementName","p","toString","console","log","e"],"mappings":"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","file":"script - ORIG KEEP ME.js","sourcesContent":["class Util {\r\n    static pad(n) {\r\n        return (n < 10) ? (`0${n}`) : n;\r\n    }\r\n}\r\n\r\nlet nextId = 1;\r\n\r\n// TODO: Change allProducts from an array into a Map.\r\nlet allProducts = [];\r\n\r\nclass Product {\r\n\r\n    constructor(id, description, tags, email, price, sales) {\r\n        this.id = id ? id : `PROD${nextId++}`;\r\n        this.description = description;\r\n        this.tags = tags;\r\n        this.email = email;\r\n        this.price = price;\r\n        this.sales = sales;\r\n        this.ts = new Date();\r\n    }\r\n\r\n    toString() {\r\n        // Build a formatted string containing everything except the timestamp.\r\n        let descStr = this.description.toUpperCase().big().bold().fontcolor('orange');\r\n        let str = `[${this.id}] ${descStr}<br/>\r\n                   Tags ${this.tags}<br/>\r\n                   Suggested by ${this.email}<br/>\r\n                   Â£${this.price} [projected sales ${this.sales}]<br/>`;\r\n\r\n        // Append the current date/time to the  string.\r\n        const tsStr = `${this.ts.getDate()}/${this.ts.getMonth() + 1}/${this.ts.getFullYear()},    \r\n                       ${Util.pad(this.ts.getHours())}:${Util.pad(this.ts.getMinutes())}:${Util.pad(this.ts.getSeconds())}`;\r\n        \r\n        // Append the timestamp in blue.\r\n        str += tsStr.fontcolor(\"blue\");\r\n        \r\n        return str;\r\n    }\r\n    \r\n    // TODO, IF TIME PERMITS: \r\n    // Add a hasTag() function, which takes a tag as a parameter \r\n    // and returns true if the product has the specified tag, or false otherwise.\r\n\r\n}\r\n\r\n$(document).ready(() => {\r\n    $('#get').click(doGet);\r\n    $('#insert').click(doInsert);\r\n    $('#update').click(doUpdate);\r\n    $('#delete').click(doDelete);\r\n    $('#taggedProductSuggestions').on('click', 'a', doDisplayProductsForTag);\r\n});\r\n\r\nfunction doGet() {\r\n    // TODO: Implement this function, to get a product with the id entered by the user.\r\n}\r\n\r\nfunction doInsert() {\r\n\r\n    const product = readProductDetail();\r\n\r\n    // TODO: Modify this statement, so that it inserts the product into the map.\r\n    allProducts.push(product);\r\n\r\n    displayMessage(`Product inserted successfully, id ${product.id}`);\r\n    displayProductDetail(product);\r\n\r\n    // TODO: Modify the following two statements, so that they pass the map values into the functions.\r\n    displayProducts(allProducts);\r\n    displayTags(allProducts);\r\n}\r\n\r\nfunction doUpdate() {\r\n    // TODO: Implement this function, to update a product with the id entered by the user.\r\n}\r\n\r\nfunction doDelete() {\r\n    // TODO: Implement this function, to delete a product with the id entered by the user.\r\n}\r\n\r\nfunction displayMessage(message, success=true) {\r\n    const cssClass = success ? 'valid' : 'error';\r\n    $('#messageArea').removeClass().addClass(cssClass).html(message);\r\n}\r\n\r\nfunction readProductDetail(id=undefined) {\r\n\r\n    const description = $('#description').val();\r\n    const tags = $('#tags').val();\r\n    const email = $('#email').val();\r\n\r\n    const priceStr = $('#price').val();\r\n    const price = parseFloat(priceStr).toFixed(2);\r\n\r\n    const salesStr = $('#sales').val();\r\n    const sales = parseInt(salesStr);\r\n\r\n    return new Product(id, description, tags, email, price, sales);\r\n}\r\n\r\nfunction displayProductDetail(product=undefined) {\r\n\r\n    if (!product) {\r\n        $('#productDetail input').val('');\r\n    }\r\n    else {\r\n        $('#id').val(product.id);\r\n        $('#description').val(product.description);\r\n        $('#tags').val(product.tags);\r\n        $('#email').val(product.email);\r\n        $('#price').val(product.price);\r\n        $('#sales').val(product.sales);\r\n        $('#lastUpdated').val(product.ts);\r\n    }\r\n}\r\n\r\nfunction displayProducts(products, targetElementName='allProductsList') {\r\n    let str = '<ul>';\r\n    for (let p of products) {\r\n        str += `<li>${p.toString()}</li>`;\r\n        console.log(`Displayed product ${p.toString()}`);\r\n    }\r\n    str += '</ul>';\r\n    $(`#${targetElementName}`).html(str);\r\n}\r\n\r\nfunction displayTags(products) {\r\n    // TODO, IF TIME PERMITS: Implement this function, to display all tags for all products (no duplicates).\r\n}\r\n\r\nfunction doDisplayProductsForTag(e) {\r\n    // TODO, IF TIME PERMITS: Implement this function, to display products that match a selected tag.\r\n}\r\n\r\n\r\n"]}
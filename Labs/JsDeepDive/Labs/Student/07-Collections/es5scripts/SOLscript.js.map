{"version":3,"sources":["Solutions/08-Collections/es6scripts/SOLscript.js"],"names":["Util","n","nextId","allProducts","Map","Product","description","tags","email","price","sales","id","ts","Date","descStr","toUpperCase","big","bold","fontcolor","str","tsStr","getDate","getMonth","getFullYear","pad","getHours","getMinutes","getSeconds","$","document","ready","click","doGet","doInsert","doUpdate","doDelete","val","priceStr","parseFloat","toFixed","salesStr","parseInt","product","set","displayProductDetails","displayProducts","products","targetElementName","entries","k","v","toString","console","log","html"],"mappings":";;;;;;;;IAAMA,I;;;;;;;4BACSC,C,EAAG;AACV,mBAAQA,IAAI,EAAL,SAAgBA,CAAhB,GAAuBA,CAA9B;AACH;;;;;;AAGL,IAAIC,SAAS,CAAb;AACA,IAAIC,cAAc,IAAIC,GAAJ,EAAlB;;IAEMC,O;AAEF,qBAAYC,WAAZ,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,KAA7C,EAAoD;AAAA;;AAChD,aAAKC,EAAL,GAAUT,QAAV;AACA,aAAKI,WAAL,GAAmBA,WAAnB;AACA,aAAKC,IAAL,GAAYA,IAAZ;AACA,aAAKC,KAAL,GAAaA,KAAb;AACA,aAAKC,KAAL,GAAaA,KAAb;AACA,aAAKC,KAAL,GAAaA,KAAb;AACA,aAAKE,EAAL,GAAU,IAAIC,IAAJ,EAAV;AACH;;;;mCAEU;AACP;AACA,gBAAIC,UAAU,KAAKR,WAAL,CAAiBS,WAAjB,GAA+BC,GAA/B,GAAqCC,IAArC,GAA4CC,SAA5C,CAAsD,QAAtD,CAAd;AACA,gBAAIC,YAAU,KAAKR,EAAf,UAAsBG,OAAtB,uCACc,KAAKP,IADnB,+CAEsB,KAAKC,KAF3B,sCAGU,KAAKC,KAHf,0BAGyC,KAAKC,KAH9C,WAAJ;;AAKA;AACA,gBAAMU,QAAW,KAAKR,EAAL,CAAQS,OAAR,EAAX,UAAgC,KAAKT,EAAL,CAAQU,QAAR,KAAqB,CAArD,UAA0D,KAAKV,EAAL,CAAQW,WAAR,EAA1D,sCACWvB,KAAKwB,GAAL,CAAS,KAAKZ,EAAL,CAAQa,QAAR,EAAT,CADX,SAC2CzB,KAAKwB,GAAL,CAAS,KAAKZ,EAAL,CAAQc,UAAR,EAAT,CAD3C,SAC6E1B,KAAKwB,GAAL,CAAS,KAAKZ,EAAL,CAAQe,UAAR,EAAT,CADnF;;AAGA;AACAR,mBAAOC,MAAMF,SAAN,CAAgB,MAAhB,CAAP;;AAEA,mBAAOC,GAAP;AACH;;;;;;AAGLS,EAAEC,QAAF,EAAYC,KAAZ,CAAkB,YAAM;AACpBF,MAAE,MAAF,EAAUG,KAAV,CAAgBC,KAAhB;AACAJ,MAAE,SAAF,EAAaG,KAAb,CAAmBE,QAAnB;AACAL,MAAE,SAAF,EAAaG,KAAb,CAAmBG,QAAnB;AACAN,MAAE,SAAF,EAAaG,KAAb,CAAmBI,QAAnB;AACH,CALD;;AAOA,SAASF,QAAT,GAAoB;;AAEhB,QAAM3B,cAAcsB,EAAE,cAAF,EAAkBQ,GAAlB,EAApB;AACA,QAAM7B,OAAOqB,EAAE,OAAF,EAAWQ,GAAX,EAAb;AACA,QAAM5B,QAAQoB,EAAE,QAAF,EAAYQ,GAAZ,EAAd;;AAEA,QAAMC,WAAWT,EAAE,QAAF,EAAYQ,GAAZ,EAAjB;AACA,QAAM3B,QAAQ6B,WAAWD,QAAX,EAAqBE,OAArB,CAA6B,CAA7B,CAAd;;AAEA,QAAMC,WAAWZ,EAAE,QAAF,EAAYQ,GAAZ,EAAjB;AACA,QAAM1B,QAAQ+B,SAASD,QAAT,CAAd;;AAEA,QAAIE,UAAU,IAAIrC,OAAJ,CAAYC,WAAZ,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,KAA7C,CAAd;AACAP,gBAAYwC,GAAZ,CAAgBD,QAAQ/B,EAAxB,EAA4B+B,OAA5B;;AAEAE,0BAAsBF,OAAtB;AACAG,oBAAgB1C,WAAhB;AACH;;AAED,SAAS6B,KAAT,GAAiB;AACb;AACH;;AAED,SAASE,QAAT,GAAoB;AAChB;AACH;;AAED,SAASC,QAAT,GAAoB;AAChB;AACH;;AAED,SAASS,qBAAT,CAA+BF,OAA/B,EAAwC;AACpCd,MAAE,KAAF,EAASQ,GAAT,CAAaM,QAAQ/B,EAArB;AACAiB,MAAE,cAAF,EAAkBQ,GAAlB,CAAsBM,QAAQpC,WAA9B;AACAsB,MAAE,OAAF,EAAWQ,GAAX,CAAeM,QAAQnC,IAAvB;AACAqB,MAAE,QAAF,EAAYQ,GAAZ,CAAgBM,QAAQlC,KAAxB;AACAoB,MAAE,QAAF,EAAYQ,GAAZ,CAAgBM,QAAQjC,KAAxB;AACH;;AAED,SAASoC,eAAT,CAAyBC,QAAzB,EAAwE;AAAA,QAArCC,iBAAqC,uEAAnB,iBAAmB;;;AAEpE,QAAI5B,MAAM,MAAV;AAFoE;AAAA;AAAA;;AAAA;AAGpE,6BAAkB2B,SAASE,OAAT,EAAlB,8HAAsC;AAAA;AAAA,gBAA5BC,CAA4B;AAAA,gBAA1BC,CAA0B;;AAClC/B,4BAAc+B,EAAEC,QAAF,EAAd;AACAC,oBAAQC,GAAR,iCAA0CJ,CAA1C,iBAAuDC,EAAEC,QAAF,EAAvD;AACH;AANmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOpEhC,WAAO,OAAP;;AAEAS,YAAMmB,iBAAN,EAA2BO,IAA3B,CAAgCnC,GAAhC;AACH","file":"SOLscript.js","sourcesContent":["class Util {\r\n    static pad(n) {\r\n        return (n < 10) ? (`0${n}`) : n;\r\n    }\r\n}\r\n\r\nlet nextId = 1\r\nlet allProducts = new Map()\r\n\r\nclass Product {\r\n\r\n    constructor(description, tags, email, price, sales) {\r\n        this.id = nextId++\r\n        this.description = description\r\n        this.tags = tags\r\n        this.email = email\r\n        this.price = price\r\n        this.sales = sales\r\n        this.ts = new Date()\r\n    }\r\n\r\n    toString() {\r\n        // Build a formatted string containing everything except the timestamp.\r\n        let descStr = this.description.toUpperCase().big().bold().fontcolor('orange')\r\n        let str = `[${this.id}] ${descStr}<br/>\r\n                   Tags ${this.tags}<br/>\r\n                   Suggested by ${this.email}<br/>\r\n                   Â£${this.price} [projected sales ${this.sales}]<br/>`\r\n\r\n        // Append the current date/time to the  string.\r\n        const tsStr = `${this.ts.getDate()}/${this.ts.getMonth() + 1}/${this.ts.getFullYear()},    \r\n                       ${Util.pad(this.ts.getHours())}:${Util.pad(this.ts.getMinutes())}:${Util.pad(this.ts.getSeconds())}`\r\n        \r\n        // Append the timestamp in blue.\r\n        str += tsStr.fontcolor(\"blue\")\r\n        \r\n        return str\r\n    }\r\n}\r\n\r\n$(document).ready(() => {\r\n    $('#get').click(doGet);\r\n    $('#insert').click(doInsert);\r\n    $('#update').click(doUpdate);\r\n    $('#delete').click(doDelete);\r\n});\r\n\r\nfunction doInsert() {\r\n\r\n    const description = $('#description').val();\r\n    const tags = $('#tags').val();\r\n    const email = $('#email').val();\r\n\r\n    const priceStr = $('#price').val()\r\n    const price = parseFloat(priceStr).toFixed(2);\r\n\r\n    const salesStr = $('#sales').val();\r\n    const sales = parseInt(salesStr);\r\n\r\n    let product = new Product(description, tags, email, price, sales);\r\n    allProducts.set(product.id, product);\r\n\r\n    displayProductDetails(product);\r\n    displayProducts(allProducts);\r\n}\r\n\r\nfunction doGet() {\r\n    // TODO.\r\n}\r\n\r\nfunction doUpdate() {\r\n    // TODO.\r\n}\r\n\r\nfunction doDelete() {\r\n    // TODO.\r\n}\r\n\r\nfunction displayProductDetails(product) {\r\n    $('#id').val(product.id);\r\n    $('#description').val(product.description);\r\n    $('#tags').val(product.tags);\r\n    $('#email').val(product.email);\r\n    $('#price').val(product.price);\r\n}\r\n\r\nfunction displayProducts(products, targetElementName='allProductsList') {\r\n\r\n    let str = '<ul>';\r\n    for (let [k,v] of products.entries()) {\r\n        str += `<li>${v.toString()}</li>`;\r\n        console.log(`Displayed product with key ${k}, value: ${v.toString()}`)\r\n    }\r\n    str += '</ul>';\r\n\r\n    $(`#${targetElementName}`).html(str);\r\n}\r\n"]}